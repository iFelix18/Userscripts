// ==UserScript==
// @author          Davide <iFelix18@protonmail.com>
// @namespace       https://github.com/iFelix18
// @exclude         *
// ==UserLibrary==
// @name            Wikidata
// @description     Wikidata for my userscripts
// @copyright       2022, Davide (https://github.com/iFelix18)
// @license         MIT
// @version         1.0.0
// @homepageURL     https://github.com/iFelix18/Userscripts
// @supportURL      https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @connect         query.wikidata.org
// @grant           GM.xmlHttpRequest
// ==/UserScript==
(()=>{this.Wikidata=class{constructor(t={}){this._config={endpoint:t.endpoint||"https://query.wikidata.org",debug:t.debug||!1},this._headers={Accept:"application/sparql-results+json"},this._debug=(t=>{(this._config.debug||200!==t.status)&&console.log(`${t.status}: ${t.finalUrl}`)}),this._source=(t=>{switch(t){case"IMDb":return"P345";case"TMDb_movie":return"P4947";case"TMDb_tv":return"P4983";case"TVDB":return"P4835";case"Trakt":return"P8013";case"Rotten Tomatoes":return"P1258";case"Metacritic":return"P1712";case"MyAnimeList":return"P4086";case"AniDB":return"P5646";case"AniList":return"P8729";default:throw new Error("An ID source is required")}}),this._type=(t=>{switch(t){case"movie":return"Q11424";case"tv":return"Q5398426";default:throw new Error("An ID type is required")}})}ids(t,e,i){if(!t)throw new Error("An ID is required");const n=`\n      SELECT DISTINCT ?item ?itemLabel ?IMDb_ID ?TMDb_ID ?TVDb_ID ?Trakt_ID ?RottenTomatoes_ID ?Metacritic_ID ?MyAnimeList_ID ?AniDB_ID ?AniList_ID WHERE {\n        ?item p:${e=this._source(e)} ?statement0.\n        ?statement0 ps:${e} "${t}".\n        ?item p:P31 ?statement1.\n        ?statement1 (ps:P31/(wdt:P279*)) wd:${i=this._type(i)}.\n        MINUS {\n          ?item p:P31 ?statement2.\n          ?statement2 (ps:P31/(wdt:P279*)) wd:Q3464665.\n        }\n        MINUS {\n          ?item p:P31 ?statement3.\n          ?statement3 (ps:P31/(wdt:P279*)) wd:Q21191270.\n        }\n        OPTIONAL { ?item wdt:P345 ?IMDb_ID. }\n        OPTIONAL { ?item wdt:P4947 ?TMDb_ID. }\n        OPTIONAL { ?item wdt:P4983 ?TMDb_ID. }\n        OPTIONAL { ?item wdt:P4835 ?TVDb_ID. }\n        OPTIONAL { ?item wdt:P8013 ?Trakt_ID. }\n        OPTIONAL { ?item wdt:P1258 ?RottenTomatoes_ID. }\n        OPTIONAL { ?item wdt:P1712 ?Metacritic_ID. }\n        OPTIONAL { ?item wdt:P4086 ?MyAnimeList_ID. }\n        OPTIONAL { ?item wdt:P5646 ?AniDB_ID. }\n        OPTIONAL { ?item wdt:P8729 ?AniList_ID. }\n        SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }\n      }\n      LIMIT 100\n      `;return new Promise((t,e)=>{GM.xmlHttpRequest({method:"GET",url:`${this._config.endpoint}/sparql?query=${encodeURIComponent(n)}`,headers:this._headers,timeout:15e3,onload:i=>{this._debug(i);const n=JSON.parse(i.responseText).results.bindings;n.length>0?t(n.map(t=>({title:t.itemLabel?t.itemLabel.value:void 0,ids:{IMDb:t.IMDb_ID?t.IMDb_ID.value:void 0,TMDb:t.TMDb_ID?t.TMDb_ID.value:void 0,TVDB:t.TVDb_ID?t.TVDb_ID.value:void 0,Trakt:t.Trakt_ID?t.Trakt_ID.value:void 0,"Rotten Tomatoes":t.RottenTomatoes_ID?t.RottenTomatoes_ID.value:void 0,Metacritic:t.Metacritic_ID?t.Metacritic_ID.value:void 0,MyAnimeList:t.MyAnimeList_ID?t.MyAnimeList_ID.value:void 0,AniDB:t.AniDB_ID?t.AniDB_ID.value:void 0,AniList:t.AniList_ID?t.AniList_ID.value:void 0},item:t.item.value}))):e(new Error("No results"))},onerror:t=>{e(new Error("An error occurs while processing the request"))},ontimeout:t=>{e(new Error("Request times out"))}})})}}})();