// ==UserScript==
// @author          Davide <iFelix18@protonmail.com>
// @namespace       https://github.com/iFelix18
// @exclude         *
// ==UserLibrary==
// @name            OMDb API
// @description     OMDb API for my userscripts
// @copyright       2019, Davide (https://github.com/iFelix18)
// @license         MIT
// @version         1.1.1
// @homepageURL     https://github.com/iFelix18/Userscripts
// @supportURL      https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @require         https://cdn.jsdelivr.net/gh/greasemonkey/gm4-polyfill@master/gm4-polyfill.min.js
// @include         *
// @connect         omdbapi.com
// @grant           GM.xmlHttpRequest
// @grant           GM_xmlhttpRequest
// ==/UserScript==
(()=>{this.OMDb=class{constructor(e={}){if(!e.apikey)throw new Error("OMDb API Key is required");this._config={apikey:e.apikey,url:e.url||"https://www.omdbapi.com",debug:e.debug||!1},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8"},this._debug=(e=>{(this._config.debug||200!==e.status)&&console.log(`${e.status}: ${e.finalUrl}`)})}get(e={}){const t={id:e.id||"",title:e.title||"",type:e.type||void 0,year:e.year||void 0,plot:e.plot||"short"};return new Promise((e,r)=>{const s=t.id?`${this._config.url}/?apikey=${this._config.apikey}&i=${encodeURIComponent(t.id)}&type=${t.type}&y=${t.year}&plot=${t.plot}&tomatoes=true`:`${this._config.url}/?apikey=${this._config.apikey}&t=${encodeURIComponent(t.title)}&type=${t.type}&y=${t.year}&plot=${t.plot}&tomatoes=true`;GM.xmlHttpRequest({method:"GET",url:s,headers:this._headers,onload:s=>{this._debug(s);const o=JSON.parse(s.responseText);""===t.id&&""===t.title||4!==s.readyState||"[]"===s.responseText||"False"===o.Response?""===t.id&&""===t.title?r(new Error("A search query (IMDb ID or Title) is required.")):"False"===o.Response?r(new Error(o.Error)):r(new Error(s)):e(o)}})})}search(e={}){const t={search:e.search||"",type:e.type||void 0,year:e.year||void 0,page:e.page||"1"};return new Promise((e,r)=>{GM.xmlHttpRequest({method:"GET",url:`${this._config.url}/?apikey=${this._config.apikey}&s=${encodeURIComponent(t.search)}&type=${t.type}&y=${t.year}&page=${t.page}`,headers:this._headers,onload:s=>{this._debug(s);const o=JSON.parse(s.responseText);""!==t.search&&4===s.readyState&&"[]"!==s.responseText&&"False"!==o.Response?e(o.Search):""===t.search?r(new Error("A search query is required.")):"False"===o.Response?r(new Error(o.Error)):r(new Error(s))}})})}}})();