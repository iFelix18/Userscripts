// ==UserScript==
// @author          Davide <iFelix18@protonmail.com>
// @namespace       https://github.com/iFelix18
// @exclude         *
// ==UserLibrary==
// @name            OMDb API
// @description     OMDb API for my userscripts
// @copyright       2019, Davide (https://github.com/iFelix18)
// @license         MIT
// @version         1.0.2
// @homepageURL     https://github.com/iFelix18/Userscripts
// @supportURL      https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @require         https://cdn.jsdelivr.net/gh/greasemonkey/gm4-polyfill@master/gm4-polyfill.min.js
// @include         *
// @connect         omdbapi.com
// @grant           GM.xmlHttpRequest
// @grant           GM_xmlhttpRequest
// ==/UserScript==
(()=>{"use strict";this.OMDb=class{constructor(e={}){if(!e.apikey)throw new Error("OMDb API Key is required");this._config={apikey:e.apikey,url:e.url||"https://www.omdbapi.com",debug:e.debug||!1},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8"},this._debug=(e=>{(this._config.debug||200!==e.status)&&console.log(`${e.status}: ${e.finalUrl}`)})}get(e={}){const r=e.id||"",s=e.title||"",t=e.type||null,o=e.year||null,i=e.plot||"short";return new Promise((e,n)=>{const a=r?`${this._config.url}/?apikey=${this._config.apikey}&i=${r}&type=${t}&y=${o}&plot=${i}`:`${this._config.url}/?apikey=${this._config.apikey}&t=${s}&type=${t}&y=${o}&plot=${i}`;GM.xmlHttpRequest({method:"GET",url:a,headers:this._headers,onload:t=>{this._debug(t);const o=JSON.parse(t.responseText);""===r&&""===s||4!==t.readyState||"[]"===t.responseText||"False"===o.Response?""===r&&""===s?n(new Error("A search query (IMDb ID or Title) is required.")):"False"===o.Response?n(new Error(o.Error)):n(new Error(t)):e(o)}})})}search(e={}){const r=e.search||"",s=e.type||null,t=e.year||null,o=e.page||"1";return new Promise((e,i)=>{GM.xmlHttpRequest({method:"GET",url:`${this._config.url}/?apikey=${this._config.apikey}&s=${r}&type=${s}&y=${t}&page=${o}`,headers:this._headers,onload:s=>{this._debug(s);const t=JSON.parse(s.responseText);""!==r&&4===s.readyState&&"[]"!==s.responseText&&"False"!==t.Response?e(t.Search):""===r?i(new Error("A search query is required.")):"False"===t.Response?i(new Error(t.Error)):i(new Error(s))}})})}}})();