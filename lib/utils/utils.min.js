// ==UserScript==
// @author          Felix
// @namespace       https://github.com/iFelix18
// @exclude         *
// ==UserLibrary==
// @name            Utils
// @description     Utils for my userscripts
// @copyright       2019, Felix (https://github.com/iFelix18)
// @license         MIT
// @version         1.0.0
// @homepageURL     https://github.com/iFelix18/Userscripts
// @supportURL      https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @require         https://cdn.jsdelivr.net/gh/greasemonkey/gm4-polyfill@master/gm4-polyfill.min.js
// @include         *
// @grant           GM.getValue
// @grant           GM_getValue
// ==/UserScript==
(()=>{"use strict";this.Utils=class{constructor(o={}){if(!o.name)throw Error("Userscript name is required");if(!o.version)throw Error("Userscript version is required");if(!o.author)throw Error("Userscript author is required");this.config={name:o.name,version:o.version,author:o.author,color:o.color||"red",logging:o.logging||!1}}async init(o){if(console.log(`%c${this.config.name} `+`%cv${this.config.version} by ${this.config.author} is running!`,`color:${this.config.color};font-weight:bold;`,""),o&&!0===this.config.logging){const i=JSON.parse(await GM.getValue(o));Object.keys(i).forEach(o=>{console.log(`%c${this.config.name}`+`%c: ${o} is "${i[o]}"`,`color:${this.config.color};font-weight:bold;`,"")})}}log(o){!0===this.config.logging&&console.log(`%c${this.config.name}`+`%c: ${o}`,`color:${this.config.color};font-weight:bold;`,"")}alert(o){window.alert(`${this.config.name}: ${o}`)}short(o){return o.split(/\s+/).slice(0,6).join(" ").concat(" [...]")}}})();