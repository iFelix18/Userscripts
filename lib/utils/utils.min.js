// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         My Utils
// @description  Utils for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      3.0.2
// @homepage     https://github.com/iFelix18/Userscripts
// @homepageURL  https://github.com/iFelix18/Userscripts
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @grant        GM.deleteValue
// @grant        GM.getValue
// @grant        GM.setValue
// ==/UserScript==
(()=>{this.MyUtils=class{constructor(o={}){if(!o.name)throw new Error("Userscript name is required");if(!o.author)throw new Error("Userscript author is required");this._config={name:o.name.toUpperCase(),version:o.version||void 0,author:/^.*?\s<\S[^\s@]*@\S[^\s.]*\.\S+>/.test(o.author)?o.author.match(/^(.*?)(\s<\S[^\s@]*@\S[^\s.]*\.\S+>)/)[1]:o.author,color:o.color||"red",logging:o.logging||!1}}async init(o){if(console.log(`%c${this._config.name}\n`+`${this._config.version?`%cv${this._config.version} `:"%c"}by ${this._config.author} is running!`,`color:${this._config.color};font-weight:bold;font-size:18px;`,""),o&&!0===this._config.logging){const i=JSON.parse(await GM.getValue(o));for(const o of Object.keys(i))console.log(`${this._config.name}:`,`${o} is "${i[o]}"`)}}log(o){!0===this._config.logging&&console.log(`${this._config.name}:`,o)}error(o){console.error(`${this._config.name}:`,o)}alert(o){window.alert(`${this._config.name}: ${o}`)}short(o){return[...o.split(/\s+/).slice(0,6).join(" ")," [...]"]}},this.migrateConfig=(async(o,i)=>{const s=await GM.getValue(o);s&&(GM.setValue(i,s),GM.deleteValue(o),window.location.reload(!1))})})();