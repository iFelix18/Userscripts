// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         Utils
// @description  Utils for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      4.0.0
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/utils#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/utils#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @grant        GM.deleteValue
// @grant        GM.getValue
// @grant        GM.setValue
// ==/UserScript==
(o=>{const e=GM.info.script.name,i=GM.info.script.version,r=/^(.*?)\s<\S[^\s@]*@\S[^\s.]*\.\S+>$/.exec(GM.info.script.author),n=r?r[1]:GM.info.script.author;o.alert=(o=>{window.alert(`${e}: ${o}`)}),o.error=(o=>{console.error(`${e}:`,o)}),o.init=(async o=>{if(console.log(`%c${e}\n`+`%cv${i} by ${n} is running!`,"color:red;font-weight:bold;font-size:18px;",""),!o)throw new Error("A config ID is required");let r=await GM.getValue(o);if(!r)throw new Error("Wrong config ID");const t=(r=JSON.parse(r)).logging;if(GM.setValue("logging",t),t)for(const o of Object.keys(r))console.log(`${e}:`,`${o} is "${r[o]}"`)}),o.log=(async o=>{await GM.getValue("logging",!1)&&console.log(`${e}:`,o)}),o.migrateConfig=(async(o,e)=>{if(!o)throw new Error("An old config ID is required");if(!e)throw new Error("An new config ID is required");const i=await GM.getValue(o);i&&(GM.setValue(e,i),GM.deleteValue(o),window.location.reload(!1))}),o.short=(o=>o.split(" ").length>6?`${o.split(" ",6).join(" ")} [...]`:o)})(this.MU=this.MU||{});