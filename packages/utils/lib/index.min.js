// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/utils
// @description  Utils for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      6.1.0
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/utils#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/utils#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @grant        GM.deleteValue
// @grant        GM.getValue
// @grant        GM.setValue
// ==/UserScript==
this.UU=function(){const e={},o=GM.info.script.name,r=GM.info.script.version,n=/^(.*?)\s<\S[^\s@]*@\S[^\s.]*\.\S+>$/.exec(GM.info.script.author),t=n?n[1]:GM.info.script.author;let i,s;const a=()=>{new MutationObserver((()=>$.each(e,(o=>(o=>{$(o).each(((r,n)=>{$(n).data(i)||($(n).data(i,1),e[o].callback.call(r,n))}))})(o))))).observe(document,{childList:!0,subtree:!0})};return{init:async(e,n)=>{if(!e)throw new Error("A config ID is required");i=e,s="boolean"==typeof n&&n;let a=await GM.getValue(i);if(!a)throw new Error("Wrong config ID");a=JSON.parse(a);if(console.info(`%c${o}\n%cv${r}${t?` by ${t}`:""} is running!`,"color:red;font-weight:700;font-size:18px;text-transform:uppercase",""),s)for(const e in a)Object.hasOwnProperty.call(a,e)&&console.info(`${o}:`,`${e} is "${a[e]}"`)},log:e=>{s&&console.info(`${o}:`,e)},error:e=>{console.error(`${o}:`,e)},warn:e=>{console.warn(`${o}:`,e)},alert:e=>{window.alert(`${o}: ${e}`)},short:(e,o)=>e.split(" ").length>Number(o)?`${e.split(" ",Number(o)).join(" ")} [...]`:e,migrateConfig:async(e,o)=>{if(!e)throw new Error("An old config ID is required");if(!o)throw new Error("An new config ID is required");const r=await GM.getValue(e);r&&(GM.setValue(o,r),GM.deleteValue(e),window.location.reload(!1))},observe:(o,r)=>{$.extend(e,{[o]:{callback:r}}),a()}}}();
