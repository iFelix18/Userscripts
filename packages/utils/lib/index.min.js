// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/utils
// @description  Utils for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      6.0.0
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/utils#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/utils#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @grant        GM.deleteValue
// @grant        GM.getValue
// @grant        GM.setValue
// ==/UserScript==
this.UU=function(){const o=GM.info.script.name,r=GM.info.script.version,e=/^(.*?)\s<\S[^\s@]*@\S[^\s.]*\.\S+>$/.exec(GM.info.script.author),n=e?e[1]:GM.info.script.author;let i,t;return{init:async(e,s)=>{if(!e)throw new Error("A config ID is required");i=e,t="boolean"==typeof s&&s;let c=await GM.getValue(i);if(!c)throw new Error("Wrong config ID");c=JSON.parse(c);if(console.info(`%c${o}\n%cv${r}${n?` by ${n}`:""} is running!`,"color:red;font-weight:700;font-size:18px;text-transform:uppercase",""),t)for(const r in c)Object.hasOwnProperty.call(c,r)&&console.info(`${o}:`,`${r} is "${c[r]}"`)},log:r=>{t&&console.info(`${o}:`,r)},error:r=>{console.error(`${o}:`,r)},warn:r=>{console.warn(`${o}:`,r)},alert:r=>{window.alert(`${o}: ${r}`)},short:(o,r)=>o.split(" ").length>Number(r)?`${o.split(" ",Number(r)).join(" ")} [...]`:o,migrateConfig:async(o,r)=>{if(!o)throw new Error("An old config ID is required");if(!r)throw new Error("An new config ID is required");const e=await GM.getValue(o);e&&(GM.setValue(r,e),GM.deleteValue(o),window.location.reload(!1))}}}();
