// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/omdb
// @description  OMDb API for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      1.3.0
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @connect      omdbapi.com
// @grant        GM.xmlHttpRequest
// ==/UserScript==
this.OMDb=class{constructor(e={}){if(!e.apikey)throw new Error("OMDb API Key is required");this._config={apikey:e.apikey,url:e.url||"https://www.omdbapi.com",debug:e.debug||!1},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8"},this._debug=e=>{(this._config.debug||200!==e.status)&&console.log(`${e.status}: ${e.finalUrl}`)}}get(e={}){if(!e.id&&!e.title)throw new Error("A search query, IMDb ID or title, is required.");const r={id:e.id||"",title:e.title||"",type:["movie","series","episode"].includes(e.type)?e.type:"",year:e.year||"",plot:["short","full"].includes(e.plot)?e.plot:"short"};return new Promise(((e,t)=>{const s=r.id?`${this._config.url}/?apikey=${this._config.apikey}&i=${encodeURIComponent(r.id)}&type=${r.type}&y=${r.year}&plot=${r.plot}&r=json&tomatoes=true`:`${this._config.url}/?apikey=${this._config.apikey}&t=${encodeURIComponent(r.title)}&type=${r.type}&y=${r.year}&plot=${r.plot}&r=json&tomatoes=true`;GM.xmlHttpRequest({method:"GET",url:s,headers:this._headers,timeout:15e3,onload:r=>{this._debug(r);const s=JSON.parse(r.responseText);Object.keys(s).length>0&&4===r.readyState&&"[]"!==r.responseText&&"False"!==s.Response?e(s):"False"===s.Response?t(new Error(s.Error)):t(new Error("No results"))},onerror:()=>{t(new Error("An error occurs while processing the request"))},ontimeout:()=>{t(new Error("Request times out"))}})}))}search(e={}){if(!e.search)throw new Error("A search query is required.");const r={search:e.search||"",type:["movie","series","episode"].includes(e.type)?e.type:"",year:e.year||"",page:e.page>=1&&e.page<=100?e.page:1};return new Promise(((e,t)=>{GM.xmlHttpRequest({method:"GET",url:`${this._config.url}/?apikey=${this._config.apikey}&s=${encodeURIComponent(r.search)}&type=${r.type}&y=${r.year}&r=json&page=${r.page}`,headers:this._headers,timeout:15e3,onload:r=>{this._debug(r);const s=JSON.parse(r.responseText);Object.keys(s).length>0&&4===r.readyState&&"[]"!==r.responseText&&"False"!==s.Response?e(s.Search):"False"===s.Response?t(new Error(s.Error)):t(new Error("No results"))},onerror:()=>{t(new Error("An error occurs while processing the request"))},ontimeout:()=>{t(new Error("Request times out"))}})}))}};
