// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/omdb
// @description  OMDb API for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      4.1.1
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @connect      omdbapi.com
// @grant        GM.getValue
// @grant        GM.setValue
// @grant        GM.xmlHttpRequest
// ==/UserScript==
this.OMDb=function(){const t={"/id":{method:"GET",optional:["plot","tomatoes","type","year"],url:"/?i={id}&plot={plot}&tomatoes={tomatoes}&type={type}&y={year}"},"/search":{method:"GET",optional:["page","type","year"],url:"/?s={search}&page={page}&type={type}&y={year}"},"/title":{method:"GET",optional:["plot","tomatoes","type","year"],url:"/?t={title}&plot={plot}&tomatoes={tomatoes}&type={type}&y={year}"}};return class{constructor(t={},e=t.cache||{}){if(!t.api_key)throw new Error("OMDb API Key is required");this._config={api_key:t.api_key,api_url:t.api_url||"https://www.omdbapi.com",debug:t.debug||!1},this._cache={active:e.active||!1,TTL:1e3*(e.time_to_live||3600)},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8"},this._methods()}_this(){return this}_debug(t){this._config.debug&&console.log(`${t.status} - ${t.finalURL}`)}async _crypto(t){const e=await crypto.subtle.digest("SHA-256",(new TextEncoder).encode(t));return[...new Uint8Array(e)].map((t=>t.toString(16).padStart(2,"0"))).join("")}_methods(){for(const e in t){const o=e.split("/"),s=o.pop();o.shift();let r=this._this();for(const t of o)r=r[t]||(r[t]={});r[s]=this._request.bind(this,t[e])}}async _request(t,e){const o=this._resolve(t,e),s=await this._crypto(o).then().catch((t=>new Error(t))),r=await GM.getValue(s);return new Promise(((e,a)=>{this._cache.active&&r&&Date.now()-r.time<this._cache.TTL?(this._debug({status:"cached",finalURL:o}),r.data.Search?e({results:r.data.Search,totalResults:r.data.totalResults}):e(r.data)):GM.xmlHttpRequest({method:t.method,url:o,headers:this._headers,timeout:15e3,onload:t=>{this._debug({status:t.status,finalURL:o});const r=JSON.parse(t.responseText);"True"===r.Response?(this._cache.active&&GM.setValue(s,{data:r,time:Date.now()}),r.Search?e({results:r.Search,totalResults:r.totalResults}):e(r)):r.Error?a(new Error(r.Error)):a(new Error("No results"))},onerror:()=>{a(new Error("An error occurs while processing the request"))},ontimeout:()=>{a(new Error("Request times out"))}})}))}_resolve(t,e){const o=t.url.split("?"),s=e?new Set(Object.keys(e).map((t=>`${t}`))):{},r=[],a=[];if(o[0]&&r.push(o[0]),o[1])for(const r of o[1].split("&")){const o=/{(\w+)}/g.exec(r)[1],i=new RegExp(Object.keys(e).map((t=>`{${t}}`)).join("|"),"gi");if(s.has(o))a.push(r.replace(i,(t=>encodeURIComponent(e[t.replace(/[{}]/g,"")]))));else if(!t.optional.includes(o))throw new Error(`Missing parameter => ${o}`)}a.push(`apikey=${this._config.api_key}`,"r=json");return`${this._config.api_url}${r.join("/")}${a.length>0?`?${a.join("&")}`:""}`}}}();
