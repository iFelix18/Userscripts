// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/omdb
// @description  OMDb API for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      2.0.0
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @connect      omdbapi.com
// @grant        GM.xmlHttpRequest
// ==/UserScript==
this.OMDb=function(){const e={"/id":{method:"GET",url:"/?i={id}&type={type}&y={year}&plot={plot}&tomatoes={tomatoes}"},"/search":{method:"GET",url:"/?s={search}&type={type}&y={year}&page={page}"},"/title":{method:"GET",url:"/?t={title}&type={type}&y={year}&plot={plot}&tomatoes={tomatoes}"}};return class{constructor(e={}){if(!e.api_key)throw new Error("OMDb API Key is required");this._config={api_key:e.api_key,api_url:e.api_url||"https://www.omdbapi.com",debug:e.debug||!1},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8"},this._debug=e=>{(this._config.debug||200!==e.status)&&console.log(`${e.status}: ${e.finalUrl}`)},this._this=this,this._methods()}_methods(){for(const t in e){const s=t.split("/"),r=s.pop();s.shift();let o=this._this;for(const e of s)o=o[e]||(o[e]={});o[r]=this._request.bind(this,e[t])}}_request(e,t){if(!t)throw new Error("Parameters is required");return new Promise(((s,r)=>{const o=this._resolve(e,t);GM.xmlHttpRequest({method:e.method,url:o,headers:this._headers,timeout:15e3,onload:e=>{this._debug(e);const t=JSON.parse(e.responseText);"True"===t.Response&&4===e.readyState&&200===e.status?s(t):t.Error?r(new Error(t.Error)):r(new Error("No results"))},onerror:()=>{r(new Error("An error occurs while processing the request"))},ontimeout:()=>{r(new Error("Request times out"))}})}))}_resolve(e,t){const s=this._config.api_url,r=e.url.split("?"),o=[],i=[];if(r[0]&&o.push(r[0]),r[1])for(const e of r[1].split("&")){const s=new RegExp(Object.keys(t).map((e=>`{${e}}`)).join("|"),"gi");s.test(e)&&i.push(e.replace(s,(e=>t[e.replace(/[{}]/g,"")])))}return i.push(`apikey=${this._config.api_key}`,"r=json"),`${s}${o.join("")}?${i.join("&")}`}}}();
