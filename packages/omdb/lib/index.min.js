// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/omdb
// @description  OMDb API for my userscripts
// @copyright    2019, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      3.0.0
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/omdb#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// ==/UserScript==
this.OMDb=function(){const t={"/id":{method:"GET",optional:["type","year","plot","tomatoes"],url:"/?i={id}&type={type}&y={year}&plot={plot}&tomatoes={tomatoes}"},"/search":{method:"GET",optional:["type","year","page"],url:"/?s={search}&type={type}&y={year}&page={page}"},"/title":{method:"GET",optional:["type","year","plot","tomatoes"],url:"/?t={title}&type={type}&y={year}&plot={plot}&tomatoes={tomatoes}"}};return class{constructor(t={},e=t.cache||{}){if(!t.api_key)throw new Error("OMDb API Key is required");this._config={api_key:t.api_key,api_url:t.api_url||"https://www.omdbapi.com",debug:t.debug||!1},this._cache={active:e.active||!1,TTL:1e3*(e.time_to_live||3600)},this._methods()}_this(){return this}_debug(t){this._config.debug&&console.log(`${t.status} - ${t.url}`)}async _crypto(t){const e=await crypto.subtle.digest("SHA-256",(new TextEncoder).encode(t));return[...new Uint8Array(e)].map((t=>t.toString(16).padStart(2,"0"))).join("")}_methods(){for(const e in t){const o=e.split("/"),s=o.pop();o.shift();let i=this._this();for(const t of o)i=i[t]||(i[t]={});i[s]=this._request.bind(this,t[e])}}async _request(t,e){const o=this._resolve(t,e),s=await this._crypto(o).then().catch((t=>new Error(t))),i=JSON.parse(sessionStorage.getItem(s));return new Promise(((e,r)=>{const a=new AbortController,n=setTimeout((()=>{a.abort(),r(new Error("Request times out"))}),15e3);this._cache.active&&i&&Date.now()-i.time<this._cache.TTL?(this._debug({status:"cached",url:o}),e(i.data)):fetch(o,{method:t.method,mode:"cors",signal:a.signal}).then((t=>(clearTimeout(n),this._debug(t),t.json()))).then((t=>{"True"===t.Response?(this._cache.active&&sessionStorage.setItem(s,JSON.stringify({data:t,time:Date.now()})),e(t)):r(new Error(t.Error))})).catch((t=>r(t)))}))}_resolve(t,e){const o=t.url.split("?"),s=e?new Set(Object.keys(e).map((t=>`${t}`))):{},i=[],r=[];if(o[0]&&i.push(o[0]),o[1])for(const i of o[1].split("&")){const o=/{(\w+)}/g.exec(i)[1],a=new RegExp(Object.keys(e).map((t=>`{${t}}`)).join("|"),"gi");if(s.has(o))r.push(i.replace(a,(t=>encodeURIComponent(e[t.replace(/[{}]/g,"")]))));else if(!t.optional.includes(o))throw new Error(`Missing parameter: ${o}`)}r.push(`apikey=${this._config.api_key}`,"r=json");return`${this._config.api_url}${i.join("/")}${r.length>0?`?${r.join("&")}`:""}`}}}();
