// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/trakt
// @description  Trakt API for my userscripts
// @copyright    2020, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      2.3.1
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/trakt#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/trakt#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @connect      api.trakt.tv
// @grant        GM.getValue
// @grant        GM.setValue
// @grant        GM.xmlHttpRequest
// ==/UserScript==
this.Trakt=function(){const e={"/episodes/summary":{extended:["full"],method:"GET",optional:[],url:"/shows/{id}/seasons/{season}/episodes/{episode}"},"/episodes/translations":{method:"GET",optional:["language"],url:"/shows/{id}/seasons/{season}/episodes/{episode}/translations/{language}"},"/movies/summary":{extended:["full"],method:"GET",optional:[],url:"/movies/{id}"},"/movies/translations":{method:"GET",optional:["language"],url:"/movies/{id}/translations/{language}"},"/search/id":{extended:["full"],method:"GET",optional:["type"],url:"/search/{id_type}/{id}?type"},"/search/query":{extended:["full"],method:"GET",optional:["fields"],url:"/search/{type}?query&fields"},"/seasons/season":{extended:["full"],method:"GET",optional:["translations"],url:"/shows/{id}/seasons/{season}?translations"},"/seasons/summary":{extended:["full","episodes"],method:"GET",optional:[],url:"/shows/{id}/seasons"},"/shows/summary":{extended:["full"],method:"GET",optional:[],url:"/shows/{id}"},"/shows/translations":{method:"GET",optional:["language"],url:"/shows/{id}/translations/{language}"}};return class{constructor(e={},t=e.cache||{}){if(!e.client_id)throw new Error("Trakt Client ID is required");this._config={client_id:e.client_id,api_url:e.api_url||"https://api.trakt.tv",debug:e.debug||!1},this._cache={active:t.active||!1,TTL:1e3*(t.time_to_live||3600)},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8","trakt-api-key":this._config.client_id,"trakt-api-version":2},this._methods()}_this(){return this}_debug(e){this._config.debug&&console.log(`${GM.info.script.name}:`,e)}async _crypto(e){const t=await crypto.subtle.digest("SHA-256",(new TextEncoder).encode(e));return[...new Uint8Array(t)].map((e=>e.toString(16).padStart(2,"0"))).join("")}_methods(){for(const t in e){const s=t.split("/"),o=s.pop();s.shift();let i=this._this();for(const e of s)i=i[e]||(i[e]={});i[o]=this._request.bind(this,e[t])}}async _request(e,t){const s=this._resolve(e,t),o=await this._crypto(s).then().catch((e=>new Error(e))),i=await GM.getValue(o);return await new Promise(((t,n)=>{this._cache.active&&i&&Date.now()-i.time<this._cache.TTL?(this._debug({status:"cached",finalURL:s}),t(i.data)):GM.xmlHttpRequest({method:e.method,url:s,headers:this._headers,timeout:15e3,onload:e=>{this._debug({status:e.status,finalURL:s});const i=e.responseText?JSON.parse(e.responseText):void 0;if(i&&4===e.readyState&&200===e.status)this._cache.active&&GM.setValue(o,{data:i,time:Date.now()}),t(i);else switch(e.status){case 403:n(new Error("Forbidden - invalid API key or unapproved app"));break;case 404:n(new Error("Not Found - method exists, but no record found"));break;case 412:n(new Error("Precondition Failed - use application/json content type"));break;default:n(new Error("No results"))}},onerror:()=>{n(new Error("An error occurs while processing the request"))},ontimeout:()=>{n(new Error("Request times out"))}})}))}_resolve(e,t){const s=e.url.split("?"),o=t?new Set(Object.keys(t).map((e=>`${e}`))):{},i=[],n=[];if(s[0])for(let n of s[0].split("/"))if(/{.+?}/.test(n)){if(n=n.replace(/[{}]/g,""),t&&o.has(n))i.push(encodeURIComponent(t[n]));else if(!e.optional.includes(n))throw new Error(`Missing parameter: ${n}`)}else i.push(n);if(s[1])for(const i of s[1].split("&"))if(t&&o.has(i))n.push(`${i}=${encodeURIComponent(t[i])}`);else if(!e.optional.includes(i))throw new Error(`Missing parameter: ${i}`);e.extended&&t.extended&&e.extended.includes(t.extended)&&n.push(`extended=${t.extended}`);return`${this._config.api_url}${i.join("/")}${n.length>0?`?${n.join("&")}`:""}`}}}();
