// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/trakt
// @description  Trakt API for my userscripts
// @copyright    2020, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      2.1.1
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/trakt#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/trakt#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @connect      api.trakt.tv
// @grant        GM.xmlHttpRequest
// ==/UserScript==
this.Trakt=function(){const s={"/episodes/summary":{method:"GET",url:"/shows/{id}/seasons/{season}/episodes/{episode}?extended"},"/episodes/translations":{method:"GET",url:"/shows/{id}/seasons/{season}/episodes/{episode}/translations/{language}"},"/movies/summary":{method:"GET",url:"/movies/{id}?extended"},"/movies/translations":{method:"GET",url:"/movies/{id}/translations/{language}"},"/search/id":{method:"GET",url:"/search/{id_type}/{id}?type"},"/search/query":{method:"GET",url:"/search/{type}?query&extended"},"/seasons/season":{method:"GET",url:"/shows/{id}/seasons/{season}?translations&extended"},"/seasons/summary":{method:"GET",url:"/shows/{id}/seasons?extended"},"/shows/summary":{method:"GET",url:"/shows/{id}?extended"},"/shows/translations":{method:"GET",url:"/shows/{id}/translations/{language}"}};return class{constructor(s={}){if(!s.client_id)throw new Error("Trakt Client ID is required");this._config={client_id:s.client_id,api_url:s.api_url||"https://api.trakt.tv",debug:s.debug||!1},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8","trakt-api-key":this._config.client_id,"trakt-api-version":2},this._debug=s=>{(this._config.debug||200!==s.status)&&console.log(`${s.status}: ${s.finalUrl}`)},this._this=this,this._methods()}_methods(){for(const e in s){const t=e.split("/"),o=t.pop();t.shift();let i=this._this;for(const s of t)i=i[s]||(i[s]={});i[o]=this._request.bind(this,s[e])}}_request(s,e){return new Promise(((t,o)=>{const i=this._resolve(s,e);GM.xmlHttpRequest({method:s.method,url:i,headers:this._headers,timeout:15e3,onload:s=>{this._debug(s);const e=JSON.parse(s.responseText);4===s.readyState&&200===s.status?t(e):e.status_message?o(new Error(e.status_message)):o(new Error("No results"))},onerror:()=>{o(new Error("An error occurs while processing the request"))},ontimeout:()=>{o(new Error("Request times out"))}})}))}_resolve(s,e){const t=this._config.api_url,o=s.url.split("?"),i=[],r=[];if(o[0])if(e){const s=new RegExp(Object.keys(e).map((s=>`{${s}}`)).join("|"),"gi");i.push(o[0].replace(s,(s=>e[s.replace(/[{}]/g,"")])))}else i.push(o[0]);if(o[1])for(const s of o[1].split("&")){new RegExp(Object.keys(e).map((s=>`${s}`)).join("|"),"gi").test(s)&&r.push(`${s}=${e[s]}`)}return`${t}${i.join("")} ${r.length>0?`?${r.join(" & ")}`:""}`}}}();
