// ==UserScript==
// @author       Davide <iFelix18@protonmail.com>
// @namespace    https://github.com/iFelix18
// @exclude      *
// ==UserLibrary==
// @name         @ifelix18/rottentomatoes
// @description  Rotten Tomatoes API for my userscripts
// @copyright    2022, Davide (https://github.com/iFelix18)
// @license      MIT
// @version      1.2.0
// @homepage     https://github.com/iFelix18/Userscripts/tree/master/packages/rottentomatoes#readme
// @homepageURL  https://github.com/iFelix18/Userscripts/tree/master/packages/rottentomatoes#readme
// @supportURL   https://github.com/iFelix18/Userscripts/issues
// ==/UserLibrary==
// @connect      rottentomatoes.com
// @grant        GM.xmlHttpRequest
// ==/UserScript==
this.RottenTomatoes=class{constructor(e={}){this._config={url:e.url||"https://www.rottentomatoes.com",debug:e.debug||!1},this._headers={"User-Agent":"Mozilla/5.0","Content-Type":"application/json;charset=utf-8"},this._debug=e=>{(this._config.debug||200!==e.status)&&console.log(`${e.status}: ${e.finalUrl}`)}}search(e={}){if(!e.query)throw new Error("A search query is required.");const t={query:e.query,type:["movie","series"].includes(e.type)?"series"===e.type?"tvseries":e.type:"",limit:e.limit||25};return new Promise(((e,r)=>{GM.xmlHttpRequest({method:"GET",url:`${this._config.url}/api/private/v2.0/search/?q=${encodeURIComponent(t.query)}&t=${t.type}&limit=${t.limit}`,headers:this._headers,timeout:15e3,onload:t=>{this._debug(t);const s=JSON.parse(t.responseText);Object.keys(s).length>0&&(s.movieCount>0||s.tvCount>0)&&4===t.readyState&&"[]"!==t.responseText?s.movieCount>0&&s.tvCount>0?e([...s.movies,...s.tvSeries]):s.movieCount>0?e(s.movies):s.tvCount>0&&e(s.tvSeries):r(new Error("No results"))},onerror:()=>{r(new Error("An error occurs while processing the request"))},ontimeout:()=>{r(new Error("Request times out"))}})}))}};
